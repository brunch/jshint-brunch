// Generated by CoffeeScript 1.7.1
var JSHintLinter, fs, jshint, jshintcli, logger, path, removeComments;

jshint = require('jshint').JSHINT;

jshintcli = require('jshint/src/cli');

fs = require('fs');

path = require('path');

logger = require('loggy');

removeComments = function(str) {
  str = str || "";
  str = str.replace(/\/\*(?:(?!\*\/)[\s\S])*\*\//g, "");
  return str = str.replace(/\/\/[^\n\r]*/g, "");
};

module.exports = JSHintLinter = (function() {
  JSHintLinter.prototype.brunchPlugin = true;

  JSHintLinter.prototype.type = 'javascript';

  JSHintLinter.prototype.extension = 'js';

  function JSHintLinter(config) {
    var buff, cfg, e, filename, stats, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
    this.config = config;
    if ('jshint' in this.config) {
      console.warn("Warning: config.jshint is deprecated, please move it to config.plugins.jshint");
    }
    cfg = (_ref = (_ref1 = (_ref2 = this.config) != null ? (_ref3 = _ref2.plugins) != null ? _ref3.jshint : void 0 : void 0) != null ? _ref1 : (_ref4 = this.config) != null ? _ref4.jshint : void 0) != null ? _ref : {};
    this.options = cfg.options != null ? cfg.options : void 0;
    this.globals = cfg.globals;
    this.pattern = (_ref5 = cfg.pattern) != null ? _ref5 : RegExp("(" + (((_ref6 = this.config.paths) != null ? (_ref7 = _ref6.watched) != null ? _ref7.join("|") : void 0 : void 0) || "app") + ").*\\.js$");
    this.warnOnly = cfg.warnOnly;
    if (!this.options) {
      filename = path.join(process.cwd(), ".jshintrc");
      try {
        stats = fs.statSync(filename);
        if (stats.isFile()) {
          buff = fs.readFileSync(filename);
          this.options = JSON.parse(removeComments(buff.toString()));
          this.globals = this.options.globals;
          delete this.options.globals;
        }
      } catch (_error) {
        e = _error;
        e = e.toString().replace("Error: ENOENT, ", "");
        console.warn(".jshintrc parsing error: " + e + ". jshint will run with default options.");
      }
    }
  }

  JSHintLinter.prototype.lint = function(data, path, callback) {
    var error, msg, success;
    success = jshint(data, this.options, this.globals);
    if (success) {
      callback();
      return;
    } else {
      error = jshint.errors;
      error.forEach((function(_this) {
        return function(e) {
          if (e != null) {
            return logger.warn("" + path + ":" + e.line + ":" + e.character + " " + e.reason + " " + (e.id || ''));
          }
        };
      })(this));
    }
    msg = "JSHint detected " + error.length + " problems.\n";
    if (this.warnOnly) {
      msg = 'warn: ' + msg;
    }
    return callback(msg);
  };

  return JSHintLinter;

})();
