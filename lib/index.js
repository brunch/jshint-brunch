// Generated by CoffeeScript 1.9.1
var JSHintLinter, chalk, fs, jshint, jshintcli, pad, path, pluralize, removeComments;

jshint = require('jshint').JSHINT;

jshintcli = require('jshint/src/cli');

fs = require('fs');

path = require('path');

chalk = require('chalk');

pluralize = require('pluralize');

pad = function(str, length) {
  while (str.length < length) {
    str = ' ' + str;
  }
  return str;
};

removeComments = function(str) {
  str = str || "";
  str = str.replace(/\/\*(?:(?!\*\/)[\s\S])*\*\//g, "");
  return str = str.replace(/\/\/[^\n\r]*/g, "");
};

module.exports = JSHintLinter = (function() {
  JSHintLinter.prototype.brunchPlugin = true;

  JSHintLinter.prototype.type = 'javascript';

  JSHintLinter.prototype.extension = 'js';

  function JSHintLinter(config) {
    var buff, cfg, e, filename, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, stats;
    this.config = config;
    if ('jshint' in this.config) {
      console.warn("Warning: config.jshint is deprecated, please move it to config.plugins.jshint");
    }
    cfg = (ref = (ref1 = (ref2 = this.config) != null ? (ref3 = ref2.plugins) != null ? ref3.jshint : void 0 : void 0) != null ? ref1 : (ref4 = this.config) != null ? ref4.jshint : void 0) != null ? ref : {};
    this.options = cfg.options != null ? cfg.options : void 0;
    this.globals = cfg.globals;
    this.pattern = (ref5 = cfg.pattern) != null ? ref5 : RegExp("(" + (((ref6 = this.config.paths) != null ? (ref7 = ref6.watched) != null ? ref7.join("|") : void 0 : void 0) || "app") + ").*\\.js$");
    this.warnOnly = cfg.warnOnly;
    this.reporter = cfg.reporter != null ? require(require(cfg.reporter)) : void 0;
    this.reporterOptions = cfg.reporterOptions;
    if (!this.options) {
      filename = path.join(process.cwd(), ".jshintrc");
      try {
        stats = fs.statSync(filename);
        if (stats.isFile()) {
          buff = fs.readFileSync(filename);
          this.options = JSON.parse(removeComments(buff.toString()));
          this.globals = this.options.globals;
          delete this.options.globals;
        }
      } catch (_error) {
        e = _error;
        e = e.toString().replace("Error: ENOENT, ", "");
        console.warn(".jshintrc parsing error: " + e + ". jshint will run with default options.");
      }
    }
  }

  JSHintLinter.prototype.lint = function(data, path, callback) {
    var error, errorMsg, errors, msg, results, success;
    success = jshint(data, this.options, this.globals);
    if (success) {
      callback();
    } else {
      errors = jshint.errors.filter(function(error) {
        return error != null;
      });
      if (this.reporter) {
        results = errors.map(function(error) {
          return {
            error: error,
            file: path
          };
        });
        this.reporter.reporter(results, void 0, this.reporterOptions);
        msg = "" + (chalk.gray('via JSHint'));
      } else {
        errorMsg = (function() {
          var i, len, results1;
          results1 = [];
          for (i = 0, len = errors.length; i < len; i++) {
            error = errors[i];
            results1.push((function(_this) {
              return function(error) {
                var ref;
                if (Math.max((ref = error.evidence) != null ? ref.length : void 0, error.character + error.reason.length) <= 120) {
                  return (pad(error.line.toString(), 7)) + " | " + (chalk.gray(error.evidence)) + "\n" + (pad("^", 10 + error.character)) + " " + (chalk.bold(error.reason));
                } else {
                  return (pad(error.line.toString(), 7)) + " | col: " + (pad(error.character, 3)) + " | " + (chalk.bold(error.reason));
                }
              };
            })(this)(error));
          }
          return results1;
        }).call(this);
        errorMsg.unshift("JSHint detected " + errors.length + " " + (pluralize('problem', errors.length)) + ":");
        errorMsg.push('\n');
        msg = errorMsg.join('\n');
      }
      if (this.warnOnly) {
        msg = "warn: " + msg;
      }
      return callback(msg);
    }
  };

  return JSHintLinter;

})();
